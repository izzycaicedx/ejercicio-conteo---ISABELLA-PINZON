##trabajo teorico
#1. ¿Cuáles son los tipos de datos primitivos en Java?
*byte: Representa un tipo de dato de 8 bits con signo. De tal manera que puede
almacenar los valores numéricos de -128 a 127 (ambos inclusive).

*short: Representa un tipo de dato de 16 bits con signo. De esta manera almacena
valores numéricos de -32.768 a 32.767.

*int: Es un tipo de dato de 32 bits con signo para almacenar valores numéricos. Cuyo
valor mínimo es -231 y el valor máximo 231-1.

*long: Es un tipo de dato de 64 bits con signo que almacena valores numéricos entre
-263 a 263-1

*float: Es un tipo dato para almacenar números en coma flotante con precisión simple
de 32 bits.

*double: Es un tipo de dato para almacenar números en coma flotante con doble
precisión de 64 bits.

*boolean: Sirve para definir tipos de datos booleanos. Es decir, aquellos que tienen
un valor de true o false. Ocupa 1 bit de información.
char: Es un tipo de datos que representa a un carácter Unicode sencillo de 16 bits.


#2 #Cómo funcionan las estructuras de control de flujo como if, else, switch y bucles en
Java?

Cómo funcionan las estructuras de control de flujo como if, else, switch y bucles en
Java?

* Declaraciones Condicionales - if y else: Las declaraciones condicionales son como
los caminos que sigue nuestro programa dependiendo de ciertas condiciones. La
declaración "if" permite ejecutar un bloque de código si una condición es verdadera.
La declaración "else" proporciona una ruta alternativa si la condición "if" resulta falsa 

La declaración switch evalúa una expresión, comparando el valor de esa expresión
con una instancia case, y ejecuta declaraciones asociadas a ese case, así como las
declaraciones en los case que siguen.

*Expresión: Es una expresión que es comparada con el valor de cada instancia case.

*case valorN: Una instancia case valorN es usada para ser comparada con la expresión. Si
la expresión coincide con el valorN, las declaraciones dentro de la instancia case se
ejecutan hasta que se encuentre el final de la declaración switch o hasta encontrar una
interrupción de break.

*default: Una instancia default, cuando es declarada, es ejecutada si el valor de la expresión
no coincide con cualquiera de las otras instancias case valorN.
bucle:
*Un bucle for{} es una estructura que nos permite repetir un conjunto de órdenes un número
finito y conocido de veces: dado un conjunto de índices, el bucle irá recorriendo cada uno de
ellos, y para cada uno ejecutará lo que tenga dentro de las llaves. 

*Los bucles while son un componente multiparadigma presente en numerosos lenguajes de
programación. Su función principal es mantener en ejecución un fragmento de código
mientras la condición asociada al while permanezca verdadera.
El bucle while funciona por medio de booleanos, es decir, a través de valores True o False,
donde se establece si la condición es verdadera o falsa.

3 ¿Por qué es importante usar nombres significativos para variables y métodos?
Es importante usar nombres significativos para variables y métodos en programación
porque facilita la lectura, mantenimiento y actualización del código.
Ventajas de usar nombres significativos:

Facilita la colaboración: Los nombres claros y descriptivos hacen que el código sea
más legible y fácil de entender

Evita errores: Los sistemas operativos y las líneas de comandos pueden interpretar
mal los espacios y caracteres especiales.

Facilita la reutilización de código: Los nombres significativos ayudan a comprender el
código incluso después de un largo periodo de tiempo.

4. ¿Qué es la Programación Orientada a Objetos (POO)?
En la Programación Orientada a Objetos (POO), un objeto se define como una instancia
concreta de una clase. Cada clase actúa como una plantilla o un modelo que especifica las
propiedades y comportamientos que serán comunes a todos los objetos derivados de esa
clase. Así, un objeto es una entidad individual que encapsula datos y funcionalidades bajo
un solo techo.
Las propiedades de un objeto, también conocidas como atributos, son variables que
almacenan los datos o el estado del objeto. Estos datos pueden ser simples valores como
números o textos, o pueden ser más complejos, como referencias a otros objetos. Por otro
lado, el comportamiento de un objeto se define a través de métodos o funciones. Estos
métodos permiten a los objetos interactuar con otros objetos o realizar tareas internas,
manipulando sus propios datos o los de otros objetos para llevar a cabo operaciones
específicas

